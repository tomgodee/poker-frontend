# This config uses the `.circleci/extended/orb-test.yml` as its base, and then publishes the app to S3.
# The workflow contained here demonstrates a practical application of `post-steps`
# and using workspace persistence
version: 2.1

orbs:
  node: circleci/node@4.3.0
  # The S3 orb will setup the aws-cli and quickly copy or sync anything to s3.
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/aws-s3
  # NOTE: Environment variables containing the necessary secrets can be setup in the CircleCI UI
  # See here https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project
  aws-s3: circleci/aws-s3@1.0.9
  aws-cli: circleci/aws-cli@2.0.0

executors:
  node:
    docker:
      - image: circleci/node:12

commands:
  install:
    steps:
      - checkout

      - run:
          name: Show current branch
          command: 'echo We are on branch: ${CIRCLE_BRANCH}'

      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}

      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn

      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

  lint:
    steps:
      - run:
          name: Linting
          command: npm run lint

  test:
    steps:
      - run:
          name: Testing
          command: CI=${CI} npm run test:ci

  build:
    steps:
      - run: 
          name: Build project
          command: npm run build
      - persist_to_workspace:
          root: ~/repo
          paths:
            - build

  upload:
    steps:
      - attach_workspace:
          at: ~/repo

      - aws-cli/setup:
          profile-name: default

      - aws-s3/sync:
          from: build/
          to: 's3://${BUCKET}'
          arguments: | # Optional arguments
            --delete

      # - run:
      #     name: Upload to AWS S3
      #     command: |
      #       aws s3 sync --delete packages/zenta-frontend/build/ s3://${FRONTEND_BUCKET_DEV}/frontend
      #       aws cloudfront create-invalidation --distribution-id $FRONTEND_DEV_CF_DIST_ID --paths "/*"
      #       echo "Successfully uploaded to s3://${FRONTEND_BUCKET_DEV}/"
      #       curl -X POST -H 'Content-type: application/json' --data '{"text":"Deploy latest frontend to development successfully."}' $SLACK_WEBHOOK_URL

jobs:
  build:
    executor: node
    working_directory: ~/repo
    environment:
      CI: true
    steps:
      - install
      - lint
      - test
      - build

  deploy:
    executor: node
    working_directory: ~/repo
    environment:
    steps:
      - upload

workflows:
  version: 2
  deploy-dev:
    jobs:
      - build:
          filters:
            branches:
              only:
                - develop
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: 
                - develop